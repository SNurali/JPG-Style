from django.shortcuts import render, get_object_or_404, redirect
from .models import Product, Category, Order, OrderItem
from django.contrib import messages
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
import logging
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = "7492480842:AAFcwTRve8yolNVvPb1OAkiustwIz35mZII"
TELEGRAM_CHAT_ID = "532350689"


def send_order_to_telegram(order):
    try:
        message = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}\n\n"
        message += f"üë§ –ò–º—è: {order.customer_name}\n"
        message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        message += f"üè† –ê–¥—Ä–µ—Å: {order.address}\n\n"
        message += "üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"

        for item in order.items.all():
            message += f"‚Ä¢ {item.product.name} - {item.quantity} √ó {item.price} = {item.quantity * item.price} —Å—É–º\n"

        message += f"\nüí∞ –ò—Ç–æ–≥–æ: {order.total_price} —Å—É–º"

        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        params = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'Markdown'
        }
        response = requests.post(url, params=params)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–ª–∞–π–¥–µ—Ä–æ–º
def home(request):
    all_products = Product.objects.all().order_by('-id')
    slider_products = all_products[:6]

    paginator = Paginator(all_products, 6)
    page = request.GET.get('page', 1)

    try:
        products = paginator.page(page)
    except PageNotAnInteger:
        products = paginator.page(1)
    except EmptyPage:
        products = paginator.page(paginator.num_pages)

    return render(request, 'products/home.html', {
        'products': products,
        'slider_products': slider_products,
        'has_products': all_products.exists(),
        'is_paginated': paginator.num_pages > 1
    })


# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
def catalog(request):
    categories = Category.objects.all()
    selected_category = request.GET.get('category')

    try:
        selected_category_id = int(selected_category) if selected_category and selected_category.isdigit() else None
    except ValueError:
        selected_category_id = None

    products_list = Product.objects.filter(category_id=selected_category_id).order_by(
        '-id') if selected_category_id else Product.objects.all().order_by('-id')

    paginator = Paginator(products_list, 6)
    page_number = request.GET.get('page')

    try:
        products = paginator.page(page_number)
    except PageNotAnInteger:
        products = paginator.page(1)
    except EmptyPage:
        products = paginator.page(paginator.num_pages)

    return render(request, 'products/catalog.html', {
        'categories': categories,
        'products': products,
        'selected_category': selected_category_id,
        'has_products': products_list.exists()
    })


# –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
def product_detail(request, pk):
    product = get_object_or_404(Product, pk=pk)
    related_products = Product.objects.exclude(pk=pk).order_by('?')[:3]
    return render(request, 'products/product_detail.html', {
        'product': product,
        'related_products': related_products
    })


# –ö–æ—Ä–∑–∏–Ω–∞
def cart(request):
    cart_items = request.session.get('cart', {})
    products_in_cart = []
    total = 0

    for product_id, quantity in cart_items.items():
        try:
            product = Product.objects.get(id=product_id)
            item_total = product.price * quantity
            products_in_cart.append({
                'product': product,
                'quantity': quantity,
                'total': item_total
            })
            total += item_total
        except Product.DoesNotExist:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            del request.session['cart'][product_id]
            request.session.modified = True
            continue

    return render(request, 'products/cart.html', {
        'cart_items': products_in_cart,
        'total': total,
        'cart_empty': len(products_in_cart) == 0
    })


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
def add_to_cart(request, product_id):
    try:
        product = Product.objects.get(pk=product_id)
    except Product.DoesNotExist:
        messages.error(request, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
        return redirect('home')

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É –∏–∑ —Å–µ—Å—Å–∏–∏
    cart = request.session.get('cart', {})

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º product_id –≤ —Å—Ç—Ä–æ–∫—É (–¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
    product_id_str = str(product_id)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ
    if product_id_str in cart:
        cart[product_id_str] += 1
    else:
        cart[product_id_str] = 1  # –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É –≤ —Å–µ—Å—Å–∏–∏
    request.session['cart'] = cart
    messages.success(request, f"{product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É (—Ç–µ–ø–µ—Ä—å: {cart[product_id_str]} —à—Ç.)")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
    if 'HTTP_REFERER' in request.META:
        return redirect(request.META.get('HTTP_REFERER'))
    return redirect('product_detail', pk=product_id)


def update_cart(request, product_id):
    if request.method == 'POST':
        try:
            quantity = int(request.POST.get('quantity', 1))
        except ValueError:
            messages.error(request, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return redirect('cart')

        cart = request.session.get('cart', {})
        product_id_str = str(product_id)

        if product_id_str in cart:
            if quantity > 0:
                cart[product_id_str] = quantity
                messages.success(request, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
            else:
                del cart[product_id_str]
                messages.success(request, '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!')

            request.session['cart'] = cart
        else:
            messages.error(request, '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.')

    return redirect('cart')


def clear_cart(request):
    if 'cart' in request.session:
        del request.session['cart']
        messages.success(request, '–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!')
    return redirect('cart')

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
def remove_from_cart(request, product_id):
    cart = request.session.get('cart', {})

    if str(product_id) in cart:
        del cart[str(product_id)]
        request.session['cart'] = cart
        messages.success(request, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

    return redirect('cart')


# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def checkout(request):
    cart = request.session.get('cart', {})

    if not cart:
        messages.warning(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return redirect('home')

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ
    products_in_cart = []
    total = 0

    for product_id, qty in cart.items():
        try:
            product = Product.objects.get(id=product_id)
            item_total = product.price * qty
            products_in_cart.append({
                'product': product,
                'quantity': qty,
                'total': item_total
            })
            total += item_total
        except Product.DoesNotExist:
            messages.error(request, f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue

    if request.method == 'POST':
        name = request.POST.get('name', '').strip()
        phone = request.POST.get('phone', '').strip()
        address = request.POST.get('address', '').strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not name:
            messages.error(request, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
            return redirect('checkout')
        if not phone:
            messages.error(request, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω")
            return redirect('checkout')
        if not address:
            messages.error(request, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å")
            return redirect('checkout')

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order = Order.objects.create(
                customer_name=name,
                phone=phone,
                address=address,
                total_price=total,
                status='new'
            )

            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
            for item in products_in_cart:
                OrderItem.objects.create(
                    order=order,
                    product=item['product'],
                    quantity=item['quantity'],
                    price=item['product'].price
                )

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            request.session['cart'] = {}

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            send_order_to_telegram(order)

            messages.success(request, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            return redirect('order_success', order_id=order.id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
            messages.error(request, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return redirect('checkout')

    return render(request, 'products/checkout.html', {
        'cart_items': products_in_cart,
        'total': total
    })

def order_success(request, order_id):
    try:
        order = Order.objects.get(id=order_id)
        return render(request, 'products/order_success.html', {'order': order})
    except Order.DoesNotExist:
        messages.error(request, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return redirect('home')

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
def contacts(request):
    return render(request, 'products/contacts.html')