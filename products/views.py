from django.shortcuts import render, get_object_or_404, redirect
from django.db import models  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç models
from .models import Product, Category, Order, OrderItem
from django.contrib import messages
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
import logging
import requests
from django.templatetags.static import static
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from .models import Product, Category, Order, OrderItem, Wishlist, AutoChemistryPost
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
from django.utils import timezone
from xml.etree.ElementTree import Element, SubElement, tostring
from django.utils.encoding import smart_str
from django.http import HttpResponse
from .utils import get_usd_to_uzs_rate
from xml.etree.ElementTree import Element, SubElement, tostring
import xml.etree.ElementTree as ET
from decimal import Decimal

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = "7492480842:AAFcwTRve8yolNVvPb1OAkiustwIz35mZII"
TELEGRAM_CHAT_ID = "532350689"


def send_order_to_telegram(order):
    try:
        message = f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}\n\n"
        message += f"üë§ –ò–º—è: {order.customer_name}\n"
        message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}\n"
        message += f"üè† –ê–¥—Ä–µ—Å: {order.address}\n\n"
        message += "üì¶ –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"

        for item in order.items.all():
            message += f"‚Ä¢ {item.product.name} - {item.quantity} √ó {item.price} = {item.quantity * item.price} —Å—É–º\n"

        message += f"\nüí∞ –ò—Ç–æ–≥–æ: {order.total_price} —Å—É–º"

        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        params = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'Markdown'
        }
        response = requests.post(url, params=params)
        response.raise_for_status()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")


def yml_feed(request):
    rate = Decimal(str(get_usd_to_uzs_rate()))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float –≤ Decimal

    yml_catalog = Element('yml_catalog', date=timezone.now().strftime("%Y-%m-%d %H:%M"))
    shop = SubElement(yml_catalog, 'shop')
    SubElement(shop, 'name').text = 'SmartWash'

    currencies = SubElement(shop, 'currencies')
    SubElement(currencies, 'currency', id='USD', rate='1')

    offers = SubElement(shop, 'offers')

    for product in Product.objects.all():
        try:
            price_usd = (product.price / rate).quantize(Decimal('0.00'))  # –î–µ–ª–µ–Ω–∏–µ Decimal –Ω–∞ Decimal
        except (TypeError, ZeroDivisionError) as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product.id}: {e}")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä —Å –æ—à–∏–±–∫–æ–π

        offer = SubElement(offers, 'offer', id=str(product.id), available='true')
        SubElement(offer, 'name').text = product.name
        SubElement(offer, 'price').text = str(price_usd)
        SubElement(offer, 'currencyId').text = 'USD'
        SubElement(offer, 'categoryId').text = str(product.category.id if product.category else 1)
        SubElement(offer, 'url').text = f'https://smartwash.uz/product/{product.slug}'
        SubElement(offer, 'picture').text = request.build_absolute_uri(product.image.url) if product.image else ''

    xml_string = tostring(yml_catalog, encoding='utf-8')
    return HttpResponse(xml_string, content_type='application/xml')



# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–ª–∞–π–¥–µ—Ä–æ–º
def home(request):
    all_products = Product.objects.all().order_by('-id')
    slider_products = all_products[:6]

    paginator = Paginator(all_products, 6)
    page = request.GET.get('page', 1)

    try:
        products = paginator.page(page)
    except PageNotAnInteger:
        products = paginator.page(1)
    except EmptyPage:
        products = paginator.page(paginator.num_pages)

    return render(request, 'products/home.html', {
        'products': products,
        'slider_products': slider_products,
        'has_products': all_products.exists(),
        'is_paginated': paginator.num_pages > 1
    })


# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
def catalog(request):
    categories = Category.objects.all()
    selected_category = request.GET.get('category')
    search_query = request.GET.get('search', '').strip()

    # –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Ç–æ–≤–∞—Ä–æ–≤
    products_list = Product.objects.all().order_by('-created_at')  # –£–±—Ä–∞–ª–∏ select_related –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
    if selected_category:
        products_list = products_list.filter(category__slug=selected_category)

    # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é
    if search_query:
        products_list = products_list.filter(
            models.Q(name__icontains=search_query) |
            models.Q(description__icontains=search_query)
        )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(products_list, 9)  # 9 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    page_number = request.GET.get('page')

    try:
        products = paginator.page(page_number)
    except PageNotAnInteger:
        products = paginator.page(1)
    except EmptyPage:
        products = paginator.page(paginator.num_pages)

    context = {
        'categories': categories,
        'products': products,
        'selected_category': selected_category,
        'search_query': search_query,
    }

    return render(request, 'products/catalog.html', context)

# –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
def product_detail(request, slug):
    product = get_object_or_404(Product, slug=slug)
    related_products = Product.objects.exclude(slug=slug).order_by('?')[:3]

    return render(request, 'products/product_detail.html', {
        'product': product,
        'related_products': related_products,
        'og_title': product.name,
        'og_description': product.description[:200] + '...' if len(product.description) > 200 else product.description,
        'og_image': request.build_absolute_uri(product.image.url) if product.image else request.build_absolute_uri(
            static('img/og-image.jpg')),
    })


# –ö–æ—Ä–∑–∏–Ω–∞
def cart(request):
    cart_items = request.session.get('cart', {})
    products_in_cart = []
    total = 0

    for product_slug, quantity in cart_items.items():
        try:
            product = Product.objects.get(slug=product_slug)
            item_total = product.price * quantity
            products_in_cart.append({
                'product': product,
                'quantity': quantity,
                'total': item_total
            })
            total += item_total
        except Product.DoesNotExist:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            del request.session['cart'][product_slug]
            request.session.modified = True
            continue

    return render(request, 'products/cart.html', {
        'cart_items': products_in_cart,
        'cart_total': total,
        'cart_empty': len(products_in_cart) == 0
    })


def add_to_cart(request, slug):
    if request.method == 'POST':
        try:
            quantity = int(request.POST.get('quantity', 1))
        except ValueError:
            if request.headers.get('x-requested-with') == 'XMLHttpRequest':
                return JsonResponse({'success': False, 'message': "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"}, status=400)
            messages.error(request, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return redirect('product_detail', slug=slug)

        if quantity < 1 or quantity > 10:
            if request.headers.get('x-requested-with') == 'XMLHttpRequest':
                return JsonResponse({'success': False, 'message': "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10"}, status=400)
            messages.error(request, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
            return redirect('product_detail', slug=slug)

        try:
            product = Product.objects.get(slug=slug)
        except Product.DoesNotExist:
            if request.headers.get('x-requested-with') == 'XMLHttpRequest':
                return JsonResponse({'success': False, 'message': "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)
            messages.error(request, "–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
            return redirect('home')

        cart = request.session.get('cart', {})

        if slug in cart:
            cart[slug] += quantity
        else:
            cart[slug] = quantity

        request.session['cart'] = cart

        if request.headers.get('x-requested-with') == 'XMLHttpRequest':
            return JsonResponse({
                'success': True,
                'message': f"{product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É (—Ç–µ–ø–µ—Ä—å: {cart[slug]} —à—Ç.)",
                'count': sum(cart.values())
            })

        messages.success(request, f"{product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É (—Ç–µ–ø–µ—Ä—å: {cart[slug]} —à—Ç.)")
        return redirect(request.META.get('HTTP_REFERER', 'home'))

    return JsonResponse({'success': False, 'message': "–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω"}, status=405)

def update_cart(request, slug):
    if request.method == 'POST':
        try:
            quantity = int(request.POST.get('quantity', 1))
        except ValueError:
            messages.error(request, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return redirect('cart')

        cart = request.session.get('cart', {})

        if slug in cart:
            if quantity > 0:
                cart[slug] = quantity
                messages.success(request, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
            else:
                del cart[slug]
                messages.success(request, '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!')

            request.session['cart'] = cart
        else:
            messages.error(request, '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.')

    return redirect('cart')


def clear_cart(request):
    if 'cart' in request.session:
        del request.session['cart']
        messages.success(request, '–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!')
    return redirect('cart')

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
def remove_from_cart(request, slug):
    cart = request.session.get('cart', {})

    if slug in cart:
        del cart[slug]
        request.session['cart'] = cart
        messages.success(request, "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

    return redirect('cart')


# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def checkout(request):
    cart = request.session.get('cart', {})

    if not cart:
        messages.warning(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return redirect('home')

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ
    products_in_cart = []
    total = 0

    for product_slug, qty in cart.items():
        try:
            product = Product.objects.get(slug=product_slug)
            item_total = product.price * qty
            products_in_cart.append({
                'product': product,
                'quantity': qty,
                'total': item_total
            })
            total += item_total
        except Product.DoesNotExist:
            messages.error(request, f"–¢–æ–≤–∞—Ä {product_slug} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue

    if request.method == 'POST':
        name = request.POST.get('name', '').strip()
        phone = request.POST.get('phone', '').strip()
        address = request.POST.get('address', '').strip()

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not name:
            messages.error(request, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è")
            return redirect('checkout')
        if not phone:
            messages.error(request, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω")
            return redirect('checkout')
        if not address:
            messages.error(request, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å")
            return redirect('checkout')

        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order = Order.objects.create(
                customer_name=name,
                phone=phone,
                address=address,
                total_price=total,
                status='new'
            )

            # –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
            for item in products_in_cart:
                OrderItem.objects.create(
                    order=order,
                    product=item['product'],
                    quantity=item['quantity'],
                    price=item['product'].price
                )

            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            request.session['cart'] = {}

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
            send_order_to_telegram(order)

            messages.success(request, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            return redirect('order_success', order_id=order.id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
            messages.error(request, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return redirect('checkout')

    return render(request, 'products/checkout.html', {
        'cart_items': products_in_cart,
        'total': total
    })

def order_success(request, order_id):
    try:
        order = Order.objects.get(id=order_id)
        return render(request, 'products/order_success.html', {'order': order})
    except Order.DoesNotExist:
        messages.error(request, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return redirect('home')


@login_required
def add_to_wishlist(request, slug):
    product = get_object_or_404(Product, slug=slug)
    wishlist_item, created = Wishlist.objects.get_or_create(
        user=request.user,
        product=product
    )
    if created:
        return JsonResponse({'status': 'added'})
    return JsonResponse({'status': 'already_exists'})

@login_required
def remove_from_wishlist(request, slug):
    product = get_object_or_404(Product, slug=slug)
    Wishlist.objects.filter(
        user=request.user,
        product=product
    ).delete()
    return JsonResponse({'status': 'removed'})

@login_required
def wishlist_view(request):
    wishlist_items = Wishlist.objects.filter(user=request.user).select_related('product')
    return render(request, 'products/wishlist.html', {'wishlist_items': wishlist_items})

def send_message_to_telegram(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        params = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': text,
            'parse_mode': 'HTML' # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
        # –î–æ–±–∞–≤–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ª—É—á—à–µ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        response = requests.post(url, params=params, timeout=10)
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram: {text[:50]}...")
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
    return False

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
def contacts(request):
    if request.method == 'POST':
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
        name = request.POST.get('name', '').strip()
        email = request.POST.get('email', '').strip()
        phone = request.POST.get('phone', '').strip()
        message_text = request.POST.get('message', '').strip()

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–∏–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã)
        if not name or not message_text:
             messages.error(request, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–ò–º—è, –°–æ–æ–±—â–µ–Ω–∏–µ).")
             return render(request, 'products/contacts.html')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        telegram_message = (
            f"üì¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
            f"<b>–ò–º—è:</b> {name}\n"
        )
        if phone:
            telegram_message += f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        if email:
            telegram_message += f"<b>Email:</b> {email}\n"
        telegram_message += f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message_text}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if send_message_to_telegram(telegram_message):
            messages.success(request, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        else:
             messages.error(request, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.")

        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        return redirect('contacts')

    # –ï—Å–ª–∏ GET-–∑–∞–ø—Ä–æ—Å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return render(request, 'products/contacts.html')


def autochemistry_list(request):
    posts = AutoChemistryPost.objects.filter(is_published=True).order_by('-created_at')

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    paginator = Paginator(posts, 9)
    page_number = request.GET.get('page')

    try:
        posts = paginator.page(page_number)
    except PageNotAnInteger:
        posts = paginator.page(1)
    except EmptyPage:
        posts = paginator.page(paginator.num_pages)

    return render(request, 'products/autochemistry_list.html', {
        'posts': posts,
        'page_title': '–ú–∏—Ä –∞–≤—Ç–æ—Ö–∏–º–∏–∏ - –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –≤–∏–¥–µ–æ'
    })


def autochemistry_detail(request, slug):
    post = get_object_or_404(AutoChemistryPost, slug=slug, is_published=True)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    post.views += 1
    post.save()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø–æ—Å—Ç—ã
    similar_posts = AutoChemistryPost.objects.filter(
        is_published=True
    ).exclude(
        id=post.id
    ).order_by('-created_at')[:3]

    return render(request, 'products/autochemistry_detail.html', {
        'post': post,
        'similar_posts': similar_posts,
        'youtube_id': post.get_youtube_id(),
        'page_title': post.title
    })